// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	userpool "github.com/cogniteo/kcp-users-controller/pkg/userpool"
)

// MockUserPoolClient is an autogenerated mock type for the Client type
type MockUserPoolClient struct {
	mock.Mock
}

type MockUserPoolClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserPoolClient) EXPECT() *MockUserPoolClient_Expecter {
	return &MockUserPoolClient_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *MockUserPoolClient) CreateUser(ctx context.Context, user *userpool.User) (*userpool.User, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *userpool.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *userpool.User) (*userpool.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *userpool.User) *userpool.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userpool.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *userpool.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserPoolClient_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserPoolClient_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *userpool.User
func (_e *MockUserPoolClient_Expecter) CreateUser(ctx interface{}, user interface{}) *MockUserPoolClient_CreateUser_Call {
	return &MockUserPoolClient_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *MockUserPoolClient_CreateUser_Call) Run(run func(ctx context.Context, user *userpool.User)) *MockUserPoolClient_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*userpool.User))
	})
	return _c
}

func (_c *MockUserPoolClient_CreateUser_Call) Return(_a0 *userpool.User, _a1 error) *MockUserPoolClient_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserPoolClient_CreateUser_Call) RunAndReturn(run func(context.Context, *userpool.User) (*userpool.User, error)) *MockUserPoolClient_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, username
func (_m *MockUserPoolClient) DeleteUser(ctx context.Context, username string) error {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserPoolClient_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUserPoolClient_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockUserPoolClient_Expecter) DeleteUser(ctx interface{}, username interface{}) *MockUserPoolClient_DeleteUser_Call {
	return &MockUserPoolClient_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, username)}
}

func (_c *MockUserPoolClient_DeleteUser_Call) Run(run func(ctx context.Context, username string)) *MockUserPoolClient_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserPoolClient_DeleteUser_Call) Return(_a0 error) *MockUserPoolClient_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserPoolClient_DeleteUser_Call) RunAndReturn(run func(context.Context, string) error) *MockUserPoolClient_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: ctx, username
func (_m *MockUserPoolClient) GetUser(ctx context.Context, username string) (*userpool.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *userpool.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*userpool.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *userpool.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userpool.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserPoolClient_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockUserPoolClient_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockUserPoolClient_Expecter) GetUser(ctx interface{}, username interface{}) *MockUserPoolClient_GetUser_Call {
	return &MockUserPoolClient_GetUser_Call{Call: _e.mock.On("GetUser", ctx, username)}
}

func (_c *MockUserPoolClient_GetUser_Call) Run(run func(ctx context.Context, username string)) *MockUserPoolClient_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserPoolClient_GetUser_Call) Return(_a0 *userpool.User, _a1 error) *MockUserPoolClient_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserPoolClient_GetUser_Call) RunAndReturn(run func(context.Context, string) (*userpool.User, error)) *MockUserPoolClient_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function with given fields: ctx
func (_m *MockUserPoolClient) ListUsers(ctx context.Context) ([]*userpool.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 []*userpool.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*userpool.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*userpool.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*userpool.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserPoolClient_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockUserPoolClient_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserPoolClient_Expecter) ListUsers(ctx interface{}) *MockUserPoolClient_ListUsers_Call {
	return &MockUserPoolClient_ListUsers_Call{Call: _e.mock.On("ListUsers", ctx)}
}

func (_c *MockUserPoolClient_ListUsers_Call) Run(run func(ctx context.Context)) *MockUserPoolClient_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserPoolClient_ListUsers_Call) Return(_a0 []*userpool.User, _a1 error) *MockUserPoolClient_ListUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserPoolClient_ListUsers_Call) RunAndReturn(run func(context.Context) ([]*userpool.User, error)) *MockUserPoolClient_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, user
func (_m *MockUserPoolClient) UpdateUser(ctx context.Context, user *userpool.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *userpool.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserPoolClient_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUserPoolClient_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *userpool.User
func (_e *MockUserPoolClient_Expecter) UpdateUser(ctx interface{}, user interface{}) *MockUserPoolClient_UpdateUser_Call {
	return &MockUserPoolClient_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, user)}
}

func (_c *MockUserPoolClient_UpdateUser_Call) Run(run func(ctx context.Context, user *userpool.User)) *MockUserPoolClient_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*userpool.User))
	})
	return _c
}

func (_c *MockUserPoolClient_UpdateUser_Call) Return(_a0 error) *MockUserPoolClient_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserPoolClient_UpdateUser_Call) RunAndReturn(run func(context.Context, *userpool.User) error) *MockUserPoolClient_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserPoolClient creates a new instance of MockUserPoolClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserPoolClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserPoolClient {
	mock := &MockUserPoolClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
