name: CI and Release

on:
  push:
    branches:
      - master

permissions:
  contents: write
  packages: write

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run tests
        run: |
          go mod tidy
          make test

  version:
    name: Determine version
    runs-on: ubuntu-latest
    needs: test
    outputs:
      version_tag: ${{ steps.version.outputs.version_tag }}
      version_changed: ${{ steps.version.outputs.changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version bump
        id: version
        uses: paulhatch/semantic-version@v5.3.0
        with:
          tag_prefix: "v"
          major_pattern: "BREAKING CHANGE:"
          minor_pattern: "feat:"
          version_format: "${major}.${minor}.${patch}"
          bump_each_commit: false

  build-and-push:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    needs: [test, version]
    if: needs.version.outputs.version_changed == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/piotrjanik/kcp-users-controller
          tags: |
            type=raw,value=${{ needs.version.outputs.version_tag }}
            type=raw,value=latest

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ./Dockerfile

  push-tag:
    name: Push version tag
    runs-on: ubuntu-latest
    needs: [version, build-and-push]
    if: needs.version.outputs.version_changed == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          echo "Creating tag: ${{ needs.version.outputs.version_tag }}"
          if git tag ${{ needs.version.outputs.version_tag }}; then
            git push origin ${{ needs.version.outputs.version_tag }}
            echo "Tag created and pushed successfully"
          else
            echo "Failed to create tag"
            exit 1
          fi

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [version, push-tag]
    if: needs.version.outputs.version_changed == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:'- %s' | sed '/Merge/d' | head -10)
          else
            CHANGELOG=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:'- %s' | sed '/Merge/d')
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.version.outputs.version_tag }}
          name: Release ${{ needs.version.outputs.version_tag }}
          body: |
            ## Changes in this Release
            ${{ steps.changelog.outputs.changelog }}
            
            ## Docker Image
            `ghcr.io/piotrjanik/kcp-users-controller:${{ needs.version.outputs.version_tag }}`
          draft: false
          prerelease: false