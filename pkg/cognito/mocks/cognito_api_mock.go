// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	cognitoidentityprovider "github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider"
	mock "github.com/stretchr/testify/mock"
)

// MockCognitoAPI is an autogenerated mock type for the CognitoAPI type
type MockCognitoAPI struct {
	mock.Mock
}

type MockCognitoAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCognitoAPI) EXPECT() *MockCognitoAPI_Expecter {
	return &MockCognitoAPI_Expecter{mock: &_m.Mock}
}

// AdminCreateUser provides a mock function with given fields: ctx, params, optFns
func (_m *MockCognitoAPI) AdminCreateUser(ctx context.Context, params *cognitoidentityprovider.AdminCreateUserInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminCreateUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminCreateUser")
	}

	var r0 *cognitoidentityprovider.AdminCreateUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminCreateUserInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminCreateUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminCreateUserInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminCreateUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminCreateUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminCreateUserInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCognitoAPI_AdminCreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminCreateUser'
type MockCognitoAPI_AdminCreateUser_Call struct {
	*mock.Call
}

// AdminCreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - params *cognitoidentityprovider.AdminCreateUserInput
//   - optFns ...func(*cognitoidentityprovider.Options)
func (_e *MockCognitoAPI_Expecter) AdminCreateUser(ctx interface{}, params interface{}, optFns ...interface{}) *MockCognitoAPI_AdminCreateUser_Call {
	return &MockCognitoAPI_AdminCreateUser_Call{Call: _e.mock.On("AdminCreateUser",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockCognitoAPI_AdminCreateUser_Call) Run(run func(ctx context.Context, params *cognitoidentityprovider.AdminCreateUserInput, optFns ...func(*cognitoidentityprovider.Options))) *MockCognitoAPI_AdminCreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*cognitoidentityprovider.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*cognitoidentityprovider.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*cognitoidentityprovider.AdminCreateUserInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCognitoAPI_AdminCreateUser_Call) Return(_a0 *cognitoidentityprovider.AdminCreateUserOutput, _a1 error) *MockCognitoAPI_AdminCreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCognitoAPI_AdminCreateUser_Call) RunAndReturn(run func(context.Context, *cognitoidentityprovider.AdminCreateUserInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminCreateUserOutput, error)) *MockCognitoAPI_AdminCreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// AdminDeleteUser provides a mock function with given fields: ctx, params, optFns
func (_m *MockCognitoAPI) AdminDeleteUser(ctx context.Context, params *cognitoidentityprovider.AdminDeleteUserInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminDeleteUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminDeleteUser")
	}

	var r0 *cognitoidentityprovider.AdminDeleteUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminDeleteUserInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminDeleteUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminDeleteUserInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminDeleteUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminDeleteUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminDeleteUserInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCognitoAPI_AdminDeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminDeleteUser'
type MockCognitoAPI_AdminDeleteUser_Call struct {
	*mock.Call
}

// AdminDeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - params *cognitoidentityprovider.AdminDeleteUserInput
//   - optFns ...func(*cognitoidentityprovider.Options)
func (_e *MockCognitoAPI_Expecter) AdminDeleteUser(ctx interface{}, params interface{}, optFns ...interface{}) *MockCognitoAPI_AdminDeleteUser_Call {
	return &MockCognitoAPI_AdminDeleteUser_Call{Call: _e.mock.On("AdminDeleteUser",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockCognitoAPI_AdminDeleteUser_Call) Run(run func(ctx context.Context, params *cognitoidentityprovider.AdminDeleteUserInput, optFns ...func(*cognitoidentityprovider.Options))) *MockCognitoAPI_AdminDeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*cognitoidentityprovider.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*cognitoidentityprovider.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*cognitoidentityprovider.AdminDeleteUserInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCognitoAPI_AdminDeleteUser_Call) Return(_a0 *cognitoidentityprovider.AdminDeleteUserOutput, _a1 error) *MockCognitoAPI_AdminDeleteUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCognitoAPI_AdminDeleteUser_Call) RunAndReturn(run func(context.Context, *cognitoidentityprovider.AdminDeleteUserInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminDeleteUserOutput, error)) *MockCognitoAPI_AdminDeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// AdminDisableUser provides a mock function with given fields: ctx, params, optFns
func (_m *MockCognitoAPI) AdminDisableUser(ctx context.Context, params *cognitoidentityprovider.AdminDisableUserInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminDisableUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminDisableUser")
	}

	var r0 *cognitoidentityprovider.AdminDisableUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminDisableUserInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminDisableUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminDisableUserInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminDisableUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminDisableUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminDisableUserInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCognitoAPI_AdminDisableUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminDisableUser'
type MockCognitoAPI_AdminDisableUser_Call struct {
	*mock.Call
}

// AdminDisableUser is a helper method to define mock.On call
//   - ctx context.Context
//   - params *cognitoidentityprovider.AdminDisableUserInput
//   - optFns ...func(*cognitoidentityprovider.Options)
func (_e *MockCognitoAPI_Expecter) AdminDisableUser(ctx interface{}, params interface{}, optFns ...interface{}) *MockCognitoAPI_AdminDisableUser_Call {
	return &MockCognitoAPI_AdminDisableUser_Call{Call: _e.mock.On("AdminDisableUser",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockCognitoAPI_AdminDisableUser_Call) Run(run func(ctx context.Context, params *cognitoidentityprovider.AdminDisableUserInput, optFns ...func(*cognitoidentityprovider.Options))) *MockCognitoAPI_AdminDisableUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*cognitoidentityprovider.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*cognitoidentityprovider.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*cognitoidentityprovider.AdminDisableUserInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCognitoAPI_AdminDisableUser_Call) Return(_a0 *cognitoidentityprovider.AdminDisableUserOutput, _a1 error) *MockCognitoAPI_AdminDisableUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCognitoAPI_AdminDisableUser_Call) RunAndReturn(run func(context.Context, *cognitoidentityprovider.AdminDisableUserInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminDisableUserOutput, error)) *MockCognitoAPI_AdminDisableUser_Call {
	_c.Call.Return(run)
	return _c
}

// AdminEnableUser provides a mock function with given fields: ctx, params, optFns
func (_m *MockCognitoAPI) AdminEnableUser(ctx context.Context, params *cognitoidentityprovider.AdminEnableUserInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminEnableUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminEnableUser")
	}

	var r0 *cognitoidentityprovider.AdminEnableUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminEnableUserInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminEnableUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminEnableUserInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminEnableUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminEnableUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminEnableUserInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCognitoAPI_AdminEnableUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminEnableUser'
type MockCognitoAPI_AdminEnableUser_Call struct {
	*mock.Call
}

// AdminEnableUser is a helper method to define mock.On call
//   - ctx context.Context
//   - params *cognitoidentityprovider.AdminEnableUserInput
//   - optFns ...func(*cognitoidentityprovider.Options)
func (_e *MockCognitoAPI_Expecter) AdminEnableUser(ctx interface{}, params interface{}, optFns ...interface{}) *MockCognitoAPI_AdminEnableUser_Call {
	return &MockCognitoAPI_AdminEnableUser_Call{Call: _e.mock.On("AdminEnableUser",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockCognitoAPI_AdminEnableUser_Call) Run(run func(ctx context.Context, params *cognitoidentityprovider.AdminEnableUserInput, optFns ...func(*cognitoidentityprovider.Options))) *MockCognitoAPI_AdminEnableUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*cognitoidentityprovider.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*cognitoidentityprovider.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*cognitoidentityprovider.AdminEnableUserInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCognitoAPI_AdminEnableUser_Call) Return(_a0 *cognitoidentityprovider.AdminEnableUserOutput, _a1 error) *MockCognitoAPI_AdminEnableUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCognitoAPI_AdminEnableUser_Call) RunAndReturn(run func(context.Context, *cognitoidentityprovider.AdminEnableUserInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminEnableUserOutput, error)) *MockCognitoAPI_AdminEnableUser_Call {
	_c.Call.Return(run)
	return _c
}

// AdminGetUser provides a mock function with given fields: ctx, params, optFns
func (_m *MockCognitoAPI) AdminGetUser(ctx context.Context, params *cognitoidentityprovider.AdminGetUserInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminGetUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminGetUser")
	}

	var r0 *cognitoidentityprovider.AdminGetUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminGetUserInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminGetUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminGetUserInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminGetUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminGetUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminGetUserInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCognitoAPI_AdminGetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminGetUser'
type MockCognitoAPI_AdminGetUser_Call struct {
	*mock.Call
}

// AdminGetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - params *cognitoidentityprovider.AdminGetUserInput
//   - optFns ...func(*cognitoidentityprovider.Options)
func (_e *MockCognitoAPI_Expecter) AdminGetUser(ctx interface{}, params interface{}, optFns ...interface{}) *MockCognitoAPI_AdminGetUser_Call {
	return &MockCognitoAPI_AdminGetUser_Call{Call: _e.mock.On("AdminGetUser",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockCognitoAPI_AdminGetUser_Call) Run(run func(ctx context.Context, params *cognitoidentityprovider.AdminGetUserInput, optFns ...func(*cognitoidentityprovider.Options))) *MockCognitoAPI_AdminGetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*cognitoidentityprovider.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*cognitoidentityprovider.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*cognitoidentityprovider.AdminGetUserInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCognitoAPI_AdminGetUser_Call) Return(_a0 *cognitoidentityprovider.AdminGetUserOutput, _a1 error) *MockCognitoAPI_AdminGetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCognitoAPI_AdminGetUser_Call) RunAndReturn(run func(context.Context, *cognitoidentityprovider.AdminGetUserInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminGetUserOutput, error)) *MockCognitoAPI_AdminGetUser_Call {
	_c.Call.Return(run)
	return _c
}

// AdminUpdateUserAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *MockCognitoAPI) AdminUpdateUserAttributes(ctx context.Context, params *cognitoidentityprovider.AdminUpdateUserAttributesInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminUpdateUserAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminUpdateUserAttributes")
	}

	var r0 *cognitoidentityprovider.AdminUpdateUserAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminUpdateUserAttributesInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminUpdateUserAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminUpdateUserAttributesInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminUpdateUserAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminUpdateUserAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminUpdateUserAttributesInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCognitoAPI_AdminUpdateUserAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminUpdateUserAttributes'
type MockCognitoAPI_AdminUpdateUserAttributes_Call struct {
	*mock.Call
}

// AdminUpdateUserAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - params *cognitoidentityprovider.AdminUpdateUserAttributesInput
//   - optFns ...func(*cognitoidentityprovider.Options)
func (_e *MockCognitoAPI_Expecter) AdminUpdateUserAttributes(ctx interface{}, params interface{}, optFns ...interface{}) *MockCognitoAPI_AdminUpdateUserAttributes_Call {
	return &MockCognitoAPI_AdminUpdateUserAttributes_Call{Call: _e.mock.On("AdminUpdateUserAttributes",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockCognitoAPI_AdminUpdateUserAttributes_Call) Run(run func(ctx context.Context, params *cognitoidentityprovider.AdminUpdateUserAttributesInput, optFns ...func(*cognitoidentityprovider.Options))) *MockCognitoAPI_AdminUpdateUserAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*cognitoidentityprovider.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*cognitoidentityprovider.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*cognitoidentityprovider.AdminUpdateUserAttributesInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCognitoAPI_AdminUpdateUserAttributes_Call) Return(_a0 *cognitoidentityprovider.AdminUpdateUserAttributesOutput, _a1 error) *MockCognitoAPI_AdminUpdateUserAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCognitoAPI_AdminUpdateUserAttributes_Call) RunAndReturn(run func(context.Context, *cognitoidentityprovider.AdminUpdateUserAttributesInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminUpdateUserAttributesOutput, error)) *MockCognitoAPI_AdminUpdateUserAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserPools provides a mock function with given fields: ctx, params, optFns
func (_m *MockCognitoAPI) ListUserPools(ctx context.Context, params *cognitoidentityprovider.ListUserPoolsInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ListUserPoolsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUserPools")
	}

	var r0 *cognitoidentityprovider.ListUserPoolsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListUserPoolsInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ListUserPoolsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListUserPoolsInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.ListUserPoolsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListUserPoolsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ListUserPoolsInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCognitoAPI_ListUserPools_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserPools'
type MockCognitoAPI_ListUserPools_Call struct {
	*mock.Call
}

// ListUserPools is a helper method to define mock.On call
//   - ctx context.Context
//   - params *cognitoidentityprovider.ListUserPoolsInput
//   - optFns ...func(*cognitoidentityprovider.Options)
func (_e *MockCognitoAPI_Expecter) ListUserPools(ctx interface{}, params interface{}, optFns ...interface{}) *MockCognitoAPI_ListUserPools_Call {
	return &MockCognitoAPI_ListUserPools_Call{Call: _e.mock.On("ListUserPools",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockCognitoAPI_ListUserPools_Call) Run(run func(ctx context.Context, params *cognitoidentityprovider.ListUserPoolsInput, optFns ...func(*cognitoidentityprovider.Options))) *MockCognitoAPI_ListUserPools_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*cognitoidentityprovider.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*cognitoidentityprovider.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*cognitoidentityprovider.ListUserPoolsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCognitoAPI_ListUserPools_Call) Return(_a0 *cognitoidentityprovider.ListUserPoolsOutput, _a1 error) *MockCognitoAPI_ListUserPools_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCognitoAPI_ListUserPools_Call) RunAndReturn(run func(context.Context, *cognitoidentityprovider.ListUserPoolsInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ListUserPoolsOutput, error)) *MockCognitoAPI_ListUserPools_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function with given fields: ctx, params, optFns
func (_m *MockCognitoAPI) ListUsers(ctx context.Context, params *cognitoidentityprovider.ListUsersInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ListUsersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 *cognitoidentityprovider.ListUsersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListUsersInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ListUsersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListUsersInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.ListUsersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListUsersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ListUsersInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCognitoAPI_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockCognitoAPI_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - params *cognitoidentityprovider.ListUsersInput
//   - optFns ...func(*cognitoidentityprovider.Options)
func (_e *MockCognitoAPI_Expecter) ListUsers(ctx interface{}, params interface{}, optFns ...interface{}) *MockCognitoAPI_ListUsers_Call {
	return &MockCognitoAPI_ListUsers_Call{Call: _e.mock.On("ListUsers",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockCognitoAPI_ListUsers_Call) Run(run func(ctx context.Context, params *cognitoidentityprovider.ListUsersInput, optFns ...func(*cognitoidentityprovider.Options))) *MockCognitoAPI_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*cognitoidentityprovider.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*cognitoidentityprovider.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*cognitoidentityprovider.ListUsersInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCognitoAPI_ListUsers_Call) Return(_a0 *cognitoidentityprovider.ListUsersOutput, _a1 error) *MockCognitoAPI_ListUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCognitoAPI_ListUsers_Call) RunAndReturn(run func(context.Context, *cognitoidentityprovider.ListUsersInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ListUsersOutput, error)) *MockCognitoAPI_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCognitoAPI creates a new instance of MockCognitoAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCognitoAPI(t interface{
	mock.TestingT
	Cleanup(func())
}) *MockCognitoAPI {
	mock := &MockCognitoAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}